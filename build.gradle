buildscript {
    ext {
        ext.kotlin_version = '1.2.40'
        ext.springBootVersion = '2.0.1.RELEASE'
        ext.liquibasePluginVersion = '1.2.4'
        ext.postgresqlDriverVersion = '42.1.4'
    }
    repositories {
        mavenCentral()
        maven { // Gradle plugins
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.liquibase:liquibase-gradle-plugin:$liquibasePluginVersion")
        classpath("org.liquibase:liquibase-core")
        classpath("org.postgresql:postgresql:$postgresqlDriverVersion")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlin_version")
        classpath("se.transmode.gradle:gradle-docker:1.2")
        classpath('org.yaml:snakeyaml:1.21')
    }
}

import org.yaml.snakeyaml.Yaml

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'liquibase'
apply plugin: 'docker'

group = 'lconnected'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

jar {
    baseName = 'booking-app'
    version =  '1.0'
}

repositories {
    mavenCentral()
}

dependencies {

    // Required for Kotlin integration
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // Spring framework
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-security")

    // OAuth
    compile("org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.0.0.RELEASE")

    // Liquibase
    compile("org.liquibase:liquibase-core")
    compile("org.postgresql:postgresql:$postgresqlDriverVersion")

    // Tests
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")

}

// creating javadoc task for the code
javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
	destinationDir = file("${buildDir}/docs")
}

task('databaseDev') {
    def props = new Yaml().load(("$projectDir/src/main/resources/application.yml" as File).text)

    liquibase {
        activities {
            main {
                changeLogFile "src/main/resources/org/ubsfree/bookingapp/database/changelog-dev.xml"
                url props.spring.datasource.url
                username props.spring.datasource.username
                password props.spring.datasource.password
            }
        }
    }

    doLast {
        println "installing database for developers environment"
    }
}

docker {
    maintainer 'Lev Khrushchev <levas1992@gmail.com>'
}

/**
 * Builds docker image, tags it as version number
 * and pushes it to hub.docker.com
 */
task buildDocker(type: Docker) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

/**
 * Builds docker image, tags it as latest
 * and pushes it to hub.docker.com
 */
task buildDockerLatest(type: Docker) {
//    push = true
    push = false
    tagVersion = 'latest'
    applicationName = jar.baseName
    dockerfile = file('docker/Dockerfile')
    doFirst {
        copy {
            from 'docker/override-docker.properties'
            into stageDir.absolutePath + '/config'
        }
        copy {
            from jar
            into stageDir.absolutePath + '/jar'
        }
    }
}